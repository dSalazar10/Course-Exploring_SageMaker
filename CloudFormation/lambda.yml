Resources:
  SentimentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      # The code for the function.
      Code: 
        ZipFile: |
          import boto3
          # And we need the regular expression library to do some of the data processing
          import re
          REPLACE_NO_SPACE = re.compile("(\.)|(\;)|(\:)|(\!)|(\')|(\?)|(\,)|(\")|(\()|(\))|(\[)|(\])")
          REPLACE_WITH_SPACE = re.compile("(<br\s*/><br\s*/>)|(\-)|(\/)")
          def review_to_words(review):
              words = REPLACE_NO_SPACE.sub("", review.lower())
              words = REPLACE_WITH_SPACE.sub(" ", words)
              return words
          def bow_encoding(words, vocabulary):
              bow = [0] * len(vocabulary) # Start by setting the count for each word in the vocabulary to zero.
              for word in words.split():  # For each word in the string
                  if word in vocabulary:  # If the word is one that occurs in the vocabulary, increase its count.
                      bow[vocabulary[word]] += 1
              return bow
          def lambda_handler(event, context):

              vocab = "*** ACTUAL VOCABULARY GOES HERE ***"

              words = review_to_words(event['body'])
              bow = bow_encoding(words, vocab)
              # The SageMaker runtime is what allows us to invoke the endpoint that we've created.
              runtime = boto3.Session().client('sagemaker-runtime')
              # Now we use the SageMaker runtime to invoke our endpoint, sending the review we were given

              response = runtime.invoke_endpoint(EndpointName = '*** ENDPOINT NAME HERE ***',# The name of the endpoint we created

                                                ContentType = 'text/csv',                 # The data format that is expected
                                                Body = ','.join([str(val) for val in bow]).encode('utf-8')) # The actual review
              # The response is an HTTP response whose body contains the result of our inference
              result = response['Body'].read().decode('utf-8')
              # Round the result so that our web app only gets '1' or '0' as a response.
              result = round(float(result))
              return {
                  'statusCode' : 200,
                  'headers' : { 'Content-Type' : 'text/plain', 'Access-Control-Allow-Origin' : '*' },
                  'body' : str(result)
              }
      # Lambda sends asynchronous events when they fail processing
      # DeadLetterConfig: 
      #   DeadLetterConfig
      # A description of the function.
      Description: The frontend for a SageMaker Sentiment Analysis model
      # Environment variables that are accessible from function code during execution.
      # Environment: 
      #   Environment
      # Connection settings for an Amazon EFS file system
      # FileSystemConfigs: 
      #   - FileSystemConfig
      # The name of the Lambda function, up to 64 characters in length
      FunctionName: sentiment_lambda_function
      # The name of the method within your code that Lambda calls to execute your function
      Handler: lambda_handler
      # The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables
      # KmsKeyArn: String
      # A list of function layers to add to the function's execution environment
      # Layers: 
      #   - String
      # The amount of memory that your function has access to
      # MemorySize: Integer
      # The number of simultaneous executions to reserve for the function
      # ReservedConcurrentExecutions: Integer
      # ARN of the function's execution role
      Role:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-L-Role"
      # The identifier of the function's runtime.
      Runtime: python3.6
      # A list of tags to apply to the function.
      # Tags: 
      #   - Tag
      # The amount of time that Lambda allows a function to run before stopping it
      # Timeout: Integer
      # Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray
      # TracingConfig: 
      #   TracingConfig
      # For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC
      VpcConfig:
        # The VPC security group IDs
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCSG"
        # The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
        SubnetId: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-PUB1-SN"